/* 
 * Swagger AddressBook - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace AddressBookApi.Dtos
{
    /// <summary>
    /// EditEmailDto
    /// </summary>
    [DataContract]
    public partial class EditEmailDto : IEquatable<EditEmailDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditEmailDto" /> class.
        /// </summary>
        /// <param name="oldEmailAddress">oldEmailAddress.</param>
        /// <param name="newEmailAddress">newEmailAddress.</param>
        /// <param name="type">type.</param>
        public EditEmailDto(string oldEmailAddress = default(string), string newEmailAddress = default(string), string type = default(string))
        {
            this.OldEmailAddress = oldEmailAddress;
            this.NewEmailAddress = newEmailAddress;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets OldEmailAddress
        /// </summary>
        [DataMember(Name = "old_email_address", EmitDefaultValue = false)]
        public string? OldEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets NewEmailAddress
        /// </summary>
        [DataMember(Name = "new_email_address", EmitDefaultValue = false)]
        public string? NewEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string? Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditEmailDto {\n");
            sb.Append("  OldEmailAddress: ").Append(OldEmailAddress).Append("\n");
            sb.Append("  NewEmailAddress: ").Append(NewEmailAddress).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditEmailDto);
        }

        /// <summary>
        /// Returns true if EditEmailDto instances are equal
        /// </summary>
        /// <param name="input">Instance of EditEmailDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditEmailDto input)
        {
            if (input == null)
                return false;

            return
                (
                    this.OldEmailAddress == input.OldEmailAddress ||
                    (this.OldEmailAddress != null &&
                    this.OldEmailAddress.Equals(input.OldEmailAddress))
                ) &&
                (
                    this.NewEmailAddress == input.NewEmailAddress ||
                    (this.NewEmailAddress != null &&
                    this.NewEmailAddress.Equals(input.NewEmailAddress))
                ) &&
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OldEmailAddress != null)
                    hashCode = hashCode * 59 + this.OldEmailAddress.GetHashCode();
                if (this.NewEmailAddress != null)
                    hashCode = hashCode * 59 + this.NewEmailAddress.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
